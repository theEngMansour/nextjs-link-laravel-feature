"use client";
import React from "react";
import { QRCodeSVG } from "qrcode.react";

function Page() {
    const [position, setPosition] = React.useState({ x: 0, y: 0 });
    const [isDragging, setIsDragging] = React.useState(false);
    const [dragStart, setDragStart] = React.useState({ x: 0, y: 0 });

    const [positionQR, setPositionQR] = React.useState({ x: 0, y: 0 });
    const [isDraggingQR, setIsDraggingQR] = React.useState(false);
    const [dragStartQR, setDragStartQR] = React.useState({ x: 0, y: 0 });

    const pageBorderRef = React.useRef<HTMLDivElement>(null);

    const handleMouseDown = (e: React.MouseEvent) => {
        setIsDragging(true);
        setDragStart({
            x: e.clientX - position.x,
            y: e.clientY - position.y,
        });
    };

    const handleMouseQRDown = (e: React.MouseEvent) => {
        setIsDraggingQR(true);
        setDragStartQR({
            x: e.clientX - positionQR.x,
            y: e.clientY - positionQR.y,
        });
    };

    const handleMouseMove = (e: React.MouseEvent) => {
        if (!isDragging || !pageBorderRef.current) return;

        const rect = pageBorderRef.current.getBoundingClientRect();
        const newX = e.clientX - dragStart.x;
        const newY = e.clientY - dragStart.y;

        if (
            newX >= 0 &&
            newY >= 0 &&
            newX + 120 <= rect.width &&
            newY + 120 <= rect.height
        ) {
            setPosition({
                x: newX,
                y: newY,
            });
        }
    };

    const handleMouseMoveQR = (e: React.MouseEvent) => {
        if (!isDraggingQR || !pageBorderRef.current) return;

        const rect = pageBorderRef.current.getBoundingClientRect();
        const newX = e.clientX - dragStartQR.x;
        const newY = e.clientY - dragStartQR.y;

        if (
            newX >= 0 &&
            newY >= 0 &&
            newX + 100 <= rect.width &&
            newY + 100 <= rect.height
        ) {
            setPositionQR({
                x: newX,
                y: newY,
            });
        }
    };

    const handleMouseUp = () => setIsDragging(false);
    const handleMouseUpQR = () => setIsDraggingQR(false);

    React.useEffect(() => {
        if (isDragging) {
            document.addEventListener("mousemove", handleMouseMove);
            document.addEventListener("mouseup", handleMouseUp);
        } else {
            document.removeEventListener("mousemove", handleMouseMove);
            document.removeEventListener("mouseup", handleMouseUp);
        }

        if (isDraggingQR) {
            document.addEventListener("mousemove", handleMouseMoveQR);
            document.addEventListener("mouseup", handleMouseUpQR);
        } else {
            document.removeEventListener("mousemove", handleMouseMoveQR);
            document.removeEventListener("mouseup", handleMouseUpQR);
        }

        return () => {
            document.removeEventListener("mousemove", handleMouseMove);
            document.removeEventListener("mouseup", handleMouseUp);
            document.removeEventListener("mousemove", handleMouseMoveQR);
            document.removeEventListener("mouseup", handleMouseUpQR);
        };
    }, [isDragging, isDraggingQR]);

    return (
        <div className="flex justify-center items-center">
            <div ref={pageBorderRef} className="page-border bg-white w-[210mm] border border-black p-4 relative">
                <div
                    style={{
                        transform: `translate(${positionQR.x}px, ${positionQR.y}px)`,
                        transition: isDraggingQR ? "none" : "transform 0.3s ease-in-out",
                        position: "absolute",
                    }}
                    onMouseDown={handleMouseQRDown}
                    onMouseUp={handleMouseUpQR}
                >
                    <QRCodeSVG value="https://example.com" size={100} />
                </div>

                <div
                    style={{
                        transform: `translate(${position.x}px, ${position.y}px)`,
                        transition: isDragging ? "none" : "transform 0.3s ease-in-out",
                        position: "absolute",
                    }}
                    onMouseDown={handleMouseDown}
                    onMouseUp={handleMouseUp}
                >
                    <img src="/logo.jpg" width={120} height={120} />
                </div>

                <h1 className="text-2xl font-bold border-b pb-2">Document Title</h1>
                <p className="mt-2">
                    This is a sample document that will be printed in A4 format with a border
                    around the page.
                </p>

                <div className="mt-4 border p-4 rounded-lg">
                    <h2 className="text-xl font-semibold border-b pb-2">Section 1</h2>
                    <p>Content for section 1 goes here. This section is visually separated with a border.</p>
                </div>

                <div className="mt-4 border p-4 rounded-lg">
                    <h2 className="text-xl font-semibold border-b pb-2">Section 2</h2>
                    <p>Content for section 2 goes here. This section also has a border for clarity.</p>
                </div>
            </div>
        </div>
    );
}

export default Page;
